{"version":3,"file":"watch.component.js","sourceRoot":"","sources":["watch.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, EventEmitter, Output, OnInit } from '@angular/core';\nimport {FORM_DIRECTIVES, FormBuilder, Control, ControlGroup, Validators}  from '@angular/common';\nimport {TRANSLATE_PROVIDERS, TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport { Watch } from './../../models/watch.model';\nimport { User } from './../../models/user.model';\nimport {TwAPIService} from './../../services/twapi.service';\nimport {Http, HTTP_PROVIDERS, Headers}  from '@angular/http';\nimport { MD_BUTTON_DIRECTIVES } from '@angular2-material/button';\nimport { GAService } from './../../services/ga.service';\n\n@Component({\n  selector: 'watch-form',\n  templateUrl: 'app/directives/watch/watch.component.html',\n  styleUrls: ['app/directives/watch/watch.component.css'],\n  pipes: [TranslatePipe],\n  providers: [TwAPIService, HTTP_PROVIDERS],\n  directives: [FORM_DIRECTIVES, MD_BUTTON_DIRECTIVES]\n})\n/**\n * From to add, delete and update watches\n */\nexport class WatchComponent implements OnInit {\n\n  @Input() watchModel: Watch;\n  @Input() user: User;\n  @Output() watchSaved = new EventEmitter();\n\n  watchForm: ControlGroup;\n  brand: Control = new Control('', Validators.required);\n  model: Control = new Control();\n  caliber: Control = new Control();\n  year: Control = new Control('', Validators.compose(\n    [Validators.maxLength(4),\n    Validators.minLength(4)]\n  ));\n  serial: Control = new Control();\n  brands: { name: string, icon: string, models: string }[] = [];\n  models: string[] = [];\n  filteredBrandList: { name: string, icon: string, models: string }[] = [];\n  filteredModelList: string[] = [];\n  error:boolean = false;\n  submitAttempt:boolean = false;\n\n  /**\n   * Constructor with DI\n   * @param {TranslateService} private translate [description]\n   * @param {TwAPIService}     private twapi     [description]\n   * @param {FormBuilder}      private builder   [description]\n   */\n  constructor(protected translate: TranslateService,\n    private twapi: TwAPIService, private builder: FormBuilder) {\n\n    translate.setDefaultLang('en');\n    translate.use('en');\n\n    //Construct form\n    this.watchForm = builder.group({\n      brand: this.brand,\n      model: this.model,\n      caliber: this.caliber,\n      year: this.year,\n      serial: this.serial\n    });\n\n    //Create an empty watch if none was passed\n    if(this.watchModel === undefined){\n      this.watchModel = new Watch(null, null);\n    }\n  }\n\n  ngAfterViewInit() {\n    //Get the known brands\n    this.twapi.getBrands().then(\n      res => {\n        this.brands = res;\n      }\n    );\n  }\n\n\n  /**\n   * [selectBrand description]\n   * @param {string} brand [description]\n   */\n  selectBrand(brand: string){\n    this.twapi.getModels(brand.toLowerCase()).then(\n      res => this.models = res,\n      error => this.models = []\n    );\n    this.filteredBrandList = [];\n    this.watchModel.brand = brand;\n  }\n\n  selectModel(model: string) {\n    this.filteredModelList = [];\n    this.watchModel.name = model;\n  }\n\n  filterBrand(brand: string) {\n    this.filteredBrandList = this.brands.filter(function(element: { name: string, icon: string, models: string }) {\n      return element.name.toLowerCase().indexOf(brand.toLowerCase()) > -1;\n    });\n  }\n\n  filterModel(model:string){\n    this.filteredModelList = this.models.filter(function(element:string) {\n      return element.toLowerCase().indexOf(model.toLowerCase()) > -1;\n    });\n  }\n\n  ngOnInit() {\n  }\n\n  onSubmit(){\n    this.submitAttempt = true;\n\n    if (this.watchForm.valid) {\n      this.twapi.upsertWatch(this.watchModel).then(\n        res => {\n          GAService.event('CTA', 'WATCH_UPSERT', 'SUCCESS');\n          this.user.upsertWatch(res);\n          this.watchSaved.emit(this.user)\n        },\n        error => {\n          GAService.event('CTA', 'WATCH_UPSERT', 'FAIL');\n          this.error = true\n        }\n      );\n    }\n  }\n\n  onDelete(){\n    this.twapi.deleteWatch(this.user, this.watchModel).then(\n      res => {\n        GAService.event('CTA', 'WATCH_DELETE', 'SUCCESS');\n        this.watchSaved.emit(res)\n      },\n      error => {\n        GAService.event('CTA', 'WATCH_DELETE', 'FAIL');\n        this.error = true\n      }\n    );\n  }\n}\n"]}