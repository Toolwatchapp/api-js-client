{"version":3,"file":"signup.component.js","sourceRoot":"","sources":["signup.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Output, OnInit, EventEmitter } from '@angular/core';\nimport {TRANSLATE_PROVIDERS, TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {FORM_DIRECTIVES, FormBuilder, Control, ControlGroup, Validators}  from '@angular/common';\nimport {TwAPIService} from './../../services/twapi.service'\nimport {Http, HTTP_PROVIDERS, Headers}  from '@angular/http';\nimport { MD_BUTTON_DIRECTIVES } from '@angular2-material/button';\nimport { GlobalValidator } from './../global-validator';\nimport { GAService } from './../../services/ga.service';\n\nimport { Wove } from 'aspect.js/dist/lib/aspect';\nimport { LoggerAspect } from './../../aspects/logger.aspect';\n\n@Wove(LoggerAspect)\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'base/dist/app/directives/signup/signup.component.html',\n  // styleUrls: ['app/directives/signup/signup.component.css'],\n  pipes: [TranslatePipe],\n  providers: [TwAPIService, HTTP_PROVIDERS],\n  directives: [FORM_DIRECTIVES, MD_BUTTON_DIRECTIVES]\n})\n/**\n * Signup form. Emits a userLogged event on new user signup\n */\nexport class SignupComponent implements OnInit {\n\n  signupForm: ControlGroup;\n  email:Control;\n  emailRepeat:Control;\n  password: Control;\n  passwordRepeat: Control;\n  firstName: Control = new Control();\n  lastName: Control = new Control();\n  country: Control = new Control();\n  submitAttempt:boolean = false;\n  emailTaken:boolean = false;\n  error:boolean = false;\n  countries:[string];\n  filteredList = [];\n  query: string = \"\";\n\n  @Output() userLogged = new EventEmitter();\n\n   /**\n   * Constructor w/ service injection\n   * @param {TranslateService} private translate [description]\n   * @param {TwAPIService}     private twapi     [description]\n   * @param {FormBuilder}      private builder   [description]\n   */\n  constructor(private translate: TranslateService, \n    private twapi: TwAPIService, private builder: FormBuilder) { \n\n    translate.setDefaultLang('en');\n    translate.use('en');\n\n    translate.get(\"countries\").subscribe((result: [string]) => {\n      this.countries = result;\n    });\n\n    //Form constraints\n    this.password = new Control('', Validators.required);\n    this.email = new Control(\n      '', \n      Validators.compose(\n        [Validators.required, \n        GlobalValidator.mailFormat]\n      )\n    );\n    this.emailRepeat = new Control(\n      '', \n      Validators.compose(\n        [Validators.required, \n        GlobalValidator.mailFormat]\n      )\n    );\n    this.password = new Control(\n      '',\n      Validators.compose(\n        [Validators.required,\n        Validators.minLength(8)]\n      )\n    );\n    this.passwordRepeat = new Control(\n      '',\n      Validators.compose(\n        [Validators.required,\n          Validators.minLength(8)]\n      )\n    );\n\n\n    this.signupForm = builder.group({\n        email: this.email,\n        password: this.password,\n        emailRepeat: this.emailRepeat,\n        passwordRepeat: this.passwordRepeat,\n        lastName: this.lastName,\n        firstName: this.firstName,\n        country: this.country\n      }, { \n        validator: Validators.compose([\n          GlobalValidator.match(\n            \"email\",\n            \"emailRepeat\",\n            { \"emailMatch\": true }),\n          GlobalValidator.match(\n            \"password\",\n            \"passwordRepeat\",\n            { \"passwordMatch\": true }),\n          ]) \n      }\n    );\n  }\n\n  /**\n   * Trims the filteredList accoring to the \n   * country field\n   * @param {string} query [description]\n   */\n  filter(query:string) {\n    this.filteredList = this.countries.filter(function(element:string){\n      return element.toLowerCase().indexOf(query.toLowerCase()) > -1;\n    });\n  }\n\n  /**\n   * Assign the country label when selected \n   * from the list\n   * @param {string} item [description]\n   */\n  select(item:string){\n    this.query = item;\n    this.filteredList = [];\n  }\n\n  /**\n   * submit the form\n   * @param {string    }} user [description]\n   */\n  onSubmit(user:{\n      email: string, \n      password: string,\n      emailRepeat: string,\n      passwordRepeat: string,\n      lastName: string,\n      firstName: string\n    }) {\n    \n    this.submitAttempt = true;\n\n    if(this.signupForm.valid){\n      this.twapi.signup(user.email,\n       user.password,\n       user.firstName,\n       user.lastName,\n       this.query).then(\n        res => { \n          GAService.event('CTA', 'SIGNUP', 'SUCCESS');\n          this.userLogged.emit(res) \n        },\n        error => {\n          GAService.event('CTA', 'SIGNUP', 'FAIL');\n          switch (error.status) {\n            case TwAPIService.HTTP_UNAUTHORIZED:\n              this.emailTaken = true;\n              break;\n            default:\n              this.error = true;\n              break;\n          }\n        }\n       )\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n"]}