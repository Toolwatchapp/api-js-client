{"version":3,"file":"signup.component.js","sourceRoot":"","sources":["signup.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Output, OnInit, EventEmitter } from '@angular/core';\nimport {TRANSLATE_PROVIDERS, TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {TwAPIService} from './../../services/twapi.service'\nimport {Http, HTTP_PROVIDERS, Headers}  from '@angular/http';\nimport { GlobalValidator } from './../global-validator';\nimport { GAService } from './../../services/ga.service';\nimport { FormHelper } from './../../helpers/form.helper';\n\nimport {   \n  REACTIVE_FORM_DIRECTIVES,  \n  FormBuilder,  \n  FormGroup,\n  FormControl,\n  Validators\n} from '@angular/forms';\n\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: 'base/dist/app/directives/signup/signup.component.html',\n  // styleUrls: ['app/directives/signup/signup.component.css'],\n  pipes: [TranslatePipe],\n  providers: [TwAPIService, HTTP_PROVIDERS],\n  directives: [REACTIVE_FORM_DIRECTIVES]\n})\n/**\n * Signup form. Emits a userLogged event on new user signup\n */\nexport class SignupComponent implements OnInit {\n\n  signupForm: FormGroup;\n  submitAttempt:boolean = false;\n  emailTaken:boolean = false;\n  error:boolean = false;\n  countries:[string];\n  filteredList = [];\n  query: string = \"\";\n\n  @Output() userLogged = new EventEmitter();\n\n   /**\n   * Constructor w/ service injection\n   * @param {TranslateService} private translate [description]\n   * @param {TwAPIService}     private twapi     [description]\n   * @param {FormBuilder}      private builder   [description]\n   */\n  constructor(private translate: TranslateService, \n    private twapi: TwAPIService, private builder: FormBuilder) { \n\n    translate.setDefaultLang('en');\n    translate.use('en');\n\n    translate.get(\"countries\").subscribe((result: [string]) => {\n      this.countries = result;\n    });\n\n    this.signupForm = FormHelper.group(this.builder, {\n        email: [<any>Validators.required, <any>GlobalValidator.mailFormat],\n        emailRepeat: [<any>Validators.required, <any>GlobalValidator.mailFormat],\n        password: [<any>Validators.required, <any>Validators.minLength(8)],\n        passwordRepeat: [<any>Validators.required, <any>Validators.minLength(8)],\n        lastName: [],\n        firstName: [],\n        country: []\n      });\n  }\n\n  /**\n   * Trims the filteredList accoring to the \n   * country field\n   * @param {string} query [description]\n   */\n  filter(query:string) {\n    this.filteredList = this.countries.filter(function(element:string){\n      return element.toLowerCase().indexOf(query.toLowerCase()) > -1;\n    });\n  }\n\n  /**\n   * Assign the country label when selected \n   * from the list\n   * @param {string} item [description]\n   */\n  select(item:string){\n    this.query = item;\n    this.filteredList = [];\n  }\n\n  /**\n   * submit the form\n   * @param {string    }} user [description]\n   */\n  onSubmit(user:{\n      email: string, \n      password: string,\n      emailRepeat: string,\n      passwordRepeat: string,\n      lastName: string,\n      firstName: string\n    }) {\n\n    this.submitAttempt = true;\n\n    if(this.signupForm.valid && \n      user.password == user.passwordRepeat &&\n      user.email == user.emailRepeat){\n\n      this.twapi.signup(user.email,\n       user.password,\n       user.firstName,\n       user.lastName,\n       this.query).then(\n        res => { \n          GAService.event('CTA', 'SIGNUP', 'SUCCESS');\n          this.userLogged.emit(res) \n        },\n        error => {\n          GAService.event('CTA', 'SIGNUP', 'FAIL');\n          switch (error.status) {\n            case TwAPIService.HTTP_UNAUTHORIZED:\n              this.emailTaken = true;\n              break;\n            default:\n              this.error = true;\n              break;\n          }\n        }\n       )\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n"]}