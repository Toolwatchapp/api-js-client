{"version":3,"file":"login.component.js","sourceRoot":"","sources":["login.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Output, OnInit, EventEmitter } from '@angular/core';\nimport {TRANSLATE_PROVIDERS, TranslateService, TranslatePipe, TranslateLoader, TranslateStaticLoader} from 'ng2-translate/ng2-translate';\nimport {Control, ControlGroup, Validators}  from '@angular/common';\nimport {TwAPIService} from './../../services/twapi.service'\nimport {Http, HTTP_PROVIDERS, Headers}  from '@angular/http';\nimport { GlobalValidator } from './../global-validator';\nimport { GAService } from './../../services/ga.service';\n\nimport {  \n  FORM_DIRECTIVES,  \n  REACTIVE_FORM_DIRECTIVES,  \n  FormBuilder,  \n  FormGroup  \n} from '@angular/forms';\n\nimport { Wove } from 'aspect.js/dist/lib/aspect';\nimport { LoggerAspect } from './../../aspects/logger.aspect';\n\n// @Wove(LoggerAspect)\n@Component({\n  selector: 'app-login',\n  templateUrl: 'app/directives/login/login.component.html',\n  styleUrls: ['app/directives/login/login.component.css'],\n  pipes: [TranslatePipe],\n  directives: [FORM_DIRECTIVES, REACTIVE_FORM_DIRECTIVES]\n})\n/**\n * Login component. Provides a login form with controlled and\n * emits a User ($event userLogged) on successful login.\n */\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  email:Control;\n  password: Control;\n  submitAttempt:boolean = false;\n  credientials = false;\n  error = false;\n  @Output() userLogged = new EventEmitter();\n  @Output() loginAttempt = new EventEmitter();\n  @Output() loginError = new EventEmitter();\n\n  /**\n   * Constructor w/ service injection\n   * @param {TranslateService} private translate [description]\n   * @param {TwAPIService}     private twapi     [description]\n   * @param {FormBuilder}      private builder   [description]\n   */\n  constructor(private translate: TranslateService, \n    protected twapi: TwAPIService, private builder: FormBuilder) { \n\n\n    this.twapi.http.get('https://toolwatch.io/api/time')\n    .toPromise()\n    .then(res => console.log(res));\n\n    this.twapi.fetchTime()\n    .then( res => console.log(res));\n\n    this.twapi.login(\"vincentsatiat@gmail.com\", \"qwerty\")\n    .then(user => console.log(user));\n  \t\n    console.log(\"aawdawd\");\n    //Lang definition\n\t  translate.setDefaultLang('en');\n\t  translate.use('en');\n\n    //Form constraints\n    this.password = new Control('', Validators.required);\n    this.email = new Control('', Validators.compose([Validators.required, GlobalValidator.mailFormat]));\n\n    this.loginForm = builder.group({\n      email: this.email,\n      password: this.password\n    });\n  }\n\n  /**\n   * Form submit\n   * @param {string}} user [description]\n   */\n  onSubmit(user:{email:string, password:string}){\n\n    this.loginAttempt.emit(true);\n\n    this.submitAttempt = true;\n    this.error = false;\n    this.credientials = false;\n\n    //Form constraints are ok\n    if(this.loginForm.valid){\n      this.twapi.login(user.email, user.password).then(\n        res => { \n          this.userLogged.emit(res);\n          GAService.event('CTA', 'LOGIN', 'SUCCESS');\n        }, \n        err => {\n          GAService.event('CTA', 'LOGIN', 'FAIL');\n          this.loginAttempt.emit(false);\n\n          switch (err.status) {\n            case 401:\n              this.credientials = true;\n              break;\n            default:\n              this.error = true;\n              break;\n          }\n        }\n      );\n    }else{\n      this.loginAttempt.emit(false);\n    }\n  }\n\n  ngOnInit() {\n  }\n\n}\n"]}